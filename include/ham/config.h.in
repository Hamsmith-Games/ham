/*
 * Ham Runtime
 * Copyright (C) 2022  Hamsmith Ltd.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef HAM_CONFIG_H
#define HAM_CONFIG_H 1

/**
 * @defgroup HAM_CONFIG Library configuration
 * @ingroup HAM
 * @{
 */

#if !defined(__GNUC__) && !defined(__cplusplus)
#	error "Ham requires GNU C extensions or C++"
#endif

//
// Configuration macros
//

#define HAM_VERSION_MAJOR @HAM_VERSION_MAJOR@
#define HAM_VERSION_MINOR @HAM_VERSION_MINOR@
#define HAM_VERSION_PATCH @HAM_VERSION_PATCH@

#define HAM_VERSION_STR "@HAM_VERSION@"

#define HAM_BUILD_RELEASE          0
#define HAM_BUILD_DEBUG            1
#define HAM_BUILD_RELWITHDEBINFO   2
#define HAM_BUILD_MINSIZEREL       3

#define HAM_BUILD_TYPE HAM_BUILD_@HAM_BUILD_TYPE@
#define HAM_BUILD_TYPE_STR "@HAM_BUILD_TYPE_STR@"

#define HAM_TARGET_TRIPLE "@HAM_TARGET_TRIPLE@"

// Some preset plugin categories

#define HAM_NET_PLUGIN_CATEGORY "Net"
#define HAM_RENDERER_PLUGIN_CATEGORY "Renderer"

// Default net plugins

#define HAM_NET_GNS_PLUGIN_NAME "@HAM_NET_GNS_PLUGIN@"
#define HAM_NET_GNS_PLUGIN_UUID "@HAM_NET_GNS_PLUGIN_UUID@"
#define HAM_NET_GNS_OBJECT_NAME "ham_net_gns"

#define HAM_NET_STEAMWORKS_PLUGIN_NAME "@HAM_NET_STEAMWORKS_PLUGIN@"
#define HAM_NET_STEAMWORKS_PLUGIN_UUID "@HAM_NET_STEAMWORKS_PLUGIN_UUID@"
#define HAM_NET_STEAMWORKS_OBJECT_NAME "ham_net_steam"

#define HAM_NET_DEFAULT_PLUGIN_NAME HAM_NET_STEAMWORKS_PLUGIN_NAME
#define HAM_NET_DEFAULT_PLUGIN_UUID HAM_NET_STEAMWORKS_PLUGIN_UUID
#define HAM_NET_DEFAULT_OBJECT_NAME HAM_NET_GNS_OBJECT_NAME

// Default renderer plugins

#define HAM_RENDERER_VULKAN_PLUGIN_NAME "@HAM_RENDERER_VULKAN_PLUGIN@"
#define HAM_RENDERER_VULKAN_PLUGIN_UUID "@HAM_RENDERER_VULKAN_PLUGIN_UUID@"
#define HAM_RENDERER_VULKAN_OBJECT_NAME "ham_renderer_vulkan"

#define HAM_RENDERER_DEFAULT_PLUGIN_NAME HAM_RENDERER_VULKAN_PLUGIN_NAME
#define HAM_RENDERER_DEFAULT_PLUGIN_UUID HAM_RENDERER_VULKAN_PLUGIN_UUID
#define HAM_RENDERER_DEFAULT_OBJECT_NAME HAM_RENDERER_VULKAN_OBJECT_NAME

#cmakedefine HAM_VK_WAYLAND
#cmakedefine HAM_VK_XCB
#cmakedefine HAM_VK_XLIB
#cmakedefine HAM_VK_WIN32

#define HAM_COLONY_MAX_BUCKETS @HAM_COLONY_MAX_BUCKETS@

#define HAM_OBJECT_INSTANCE_MANAGER_MAX_BLOCKS @HAM_OBJECT_INSTANCE_MANAGER_MAX_BLOCKS@

#ifndef HAM_NAME_BUFFER_SIZE
#	define HAM_NAME_BUFFER_SIZE 128
#endif

#ifndef HAM_PATH_BUFFER_SIZE
#	define HAM_PATH_BUFFER_SIZE 512
#endif

#ifndef HAM_MESSAGE_BUFFER_SIZE
#	define HAM_MESSAGE_BUFFER_SIZE 512
#endif

#ifndef HAM_UUID_BUFFER_SIZE
#	define HAM_UUID_BUFFER_SIZE (sizeof("x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x"))
#endif

#ifdef HAM_UTF32
#	define HAM_UTF 32
#elif defined(HAM_UTF16)
#	define HAM_UTF 16
#else
#	define HAM_UTF8
#	define HAM_UTF 8
#endif

//
// Language-specific stuff
//

#ifdef __cplusplus
#	define HAM_C_API_BEGIN extern "C" {
#	define HAM_C_API_END }
#	define ham_extern_c extern "C"
#	define ham_null nullptr
#	define ham_auto auto
#	define ham_constexpr constexpr
#	define ham_thread_local thread_local
#	define ham_typeof(...) decltype(__VA_ARGS__)

	namespace ham::detail{
		template<typename T, typename U> struct is_same      { enum{ value = false }; };
		template<typename T>             struct is_same<T, T>{ enum{ value = true  }; };

		template<typename T, typename U>
		constexpr inline bool is_same_v = is_same<T, U>::value;
	}

#	define ham_is_same(type1, type2) (ham::detail::is_same_v<type1, type2>)
#else
#	define HAM_C_API_BEGIN
#	define HAM_C_API_END
#	define ham_extern_c
#	define ham_null NULL
#	define ham_constexpr
#	define ham_is_same(type1, type2) (_Generic((type1*)NULL, type2: true, default: false))
#endif

//
// Common MIME types
//

#define HAM_MIME_ENCODING(encoding_str) "charset=" encoding_str

#define HAM_MIME_ENCODING_BINARY HAM_MIME_ENCODING("binary")
#define HAM_MIME_ENCODING_ASCII HAM_MIME_ENCODING("us-ascii")

#define HAM_MIME_ENCODING_UTF_(n) HAM_MIME_ENCODING("utf-" #n)
#define HAM_MIME_ENCODING_UTF(n) HAM_MIME_ENCODING_UTF_(n)

#define HAM_MIME_ENCODING_UTF8  HAM_MIME_ENCODING_UTF_(8)
#define HAM_MIME_ENCODING_UTF16 HAM_MIME_ENCODING_UTF_(16)
#define HAM_MIME_ENCODING_UTF32 HAM_MIME_ENCODING_UTF_(32)

#define HAM_MIME_TYPE_AAC "audio/aac"
#define HAM_MIME_TYPE_ABW "application/x-abiword"
#define HAM_MIME_TYPE_ARC "application/x-freearc"
#define HAM_MIME_TYPE_AVIF "image/avif"
#define HAM_MIME_TYPE_AVI "video/x-msvideo"
#define HAM_MIME_TYPE_AZW "application/vnd.amazon.ebook"
#define HAM_MIME_TYPE_BIN "application/octet-stream"
#define HAM_MIME_TYPE_BMP "image/bmp"
#define HAM_MIME_TYPE_BZ "application/x-bzip"
#define HAM_MIME_TYPE_BZ2 "application/x-bzip2"
#define HAM_MIME_TYPE_C "text/x-c"
#define HAM_MIME_TYPE_CDA "application/x-cdf"
#define HAM_MIME_TYPE_CSH "application/x-csh"
#define HAM_MIME_TYPE_CSS "text/css"
#define HAM_MIME_TYPE_CSV "text/csv"
#define HAM_MIME_TYPE_DLL "application/x-dosexec"
#define HAM_MIME_TYPE_DOC "application/msword"
#define HAM_MIME_TYPE_DOCX "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
#define HAM_MIME_TYPE_ELF "application/x-elf"
#define HAM_MIME_TYPE_EOT "application/vnd.ms-fontobject"
#define HAM_MIME_TYPE_EPUB "application/epub+zip"
#define HAM_MIME_TYPE_EXE "application/x-msdownload"
#define HAM_MIME_TYPE_GZ "application/gzip"
#define HAM_MIME_TYPE_GIF "image/gif"
#define HAM_MIME_TYPE_HTML "text/html"
#define HAM_MIME_TYPE_ICO "image/vnd.microsoft.icon"
#define HAM_MIME_TYPE_ICS "text/calendar"
#define HAM_MIME_TYPE_JAR "application/java-archive"
#define HAM_MIME_TYPE_JPEG "image/jpeg"
#define HAM_MIME_TYPE_JS "text/javascript"
#define HAM_MIME_TYPE_JSON "application/json"
#define HAM_MIME_TYPE_JSONLD "application/ld+json"
#define HAM_MIME_TYPE_MID "audio/x-midi"
#define HAM_MIME_TYPE_MJS "text/javascript"
#define HAM_MIME_TYPE_MP3 "audio/mpeg"
#define HAM_MIME_TYPE_MP4 "video/mp4"
#define HAM_MIME_TYPE_MACH "application/x-mach-binary"
#define HAM_MIME_TYPE_MPEG "video/mpeg"
#define HAM_MIME_TYPE_MPKG "application/vnd.apple.installer+xml"
#define HAM_MIME_TYPE_ODP "application/vnd.oasis.opendocument.presentation"
#define HAM_MIME_TYPE_ODS "application/vnd.oasis.opendocument.spreadsheet"
#define HAM_MIME_TYPE_ODT "application/vnd.oasis.opendocument.text"
#define HAM_MIME_TYPE_OGA "audio/ogg"
#define HAM_MIME_TYPE_OGV "video/ogg"
#define HAM_MIME_TYPE_OGX "application/ogg"
#define HAM_MIME_TYPE_OPUS "audio/opus"
#define HAM_MIME_TYPE_OTF "font/otf"
#define HAM_MIME_TYPE_PNG "image/png"
#define HAM_MIME_TYPE_PDF "application/pdf"
#define HAM_MIME_TYPE_PHP "application/x-httpd-php"
#define HAM_MIME_TYPE_PPT "application/vnd.ms-powerpoint"
#define HAM_MIME_TYPE_PPTX "application/vnd.openxmlformats-officedocument.presentationml.presentation"
#define HAM_MIME_TYPE_RAR "application/vnd.rar"
#define HAM_MIME_TYPE_RTF "application/rtf"
#define HAM_MIME_TYPE_SH "application/x-sh"
#define HAM_MIME_TYPE_SO "application/x-sharedlib"
#define HAM_MIME_TYPE_SVG "image/svg+xml"
#define HAM_MIME_TYPE_SWF "application/x-shockwave-flash"
#define HAM_MIME_TYPE_TAR "application/x-tar"
#define HAM_MIME_TYPE_TIFF "image/tiff"
#define HAM_MIME_TYPE_TS "video/mp2t"
#define HAM_MIME_TYPE_TTF "font/ttf"
#define HAM_MIME_TYPE_TXT "text/plain"
#define HAM_MIME_TYPE_VSD "application/vnd.visio"
#define HAM_MIME_TYPE_WAV "audio/wav"
#define HAM_MIME_TYPE_WEBA "audio/webm"
#define HAM_MIME_TYPE_WEBM "video/webm"
#define HAM_MIME_TYPE_WEBP "image/webp"
#define HAM_MIME_TYPE_WOFF "font/woff"
#define HAM_MIME_TYPE_WOFF2 "font/woff2"
#define HAM_MIME_TYPE_XHTML "application/xhtml+xml"
#define HAM_MIME_TYPE_XLS "application/vnd.ms-excel"
#define HAM_MIME_TYPE_XLSX "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
#define HAM_MIME_TYPE_XML "application/xml"
#define HAM_MIME_TYPE_XUL "application/vnd.mozilla.xul+xml"
#define HAM_MIME_TYPE_ZIP "application/zip"
#define HAM_MIME_TYPE_3GP "video/3gpp"
#define HAM_MIME_TYPE_3G2 "video/3gpp2"
#define HAM_MIME_TYPE_7Z "application/x-7z-compressed"

#define HAM_MIME(type_, encoding_) type_ "; " encoding_

//
// Platform-specific stuff
//

#define HAM_PLATFORM_UNIX 0
#define HAM_PLATFORM_APPLE 1
#define HAM_PLATFORM_WIN32 2
#define HAM_PLATFORM_WIN64 3

#if defined(_WIN32)

#	if defined(_WIN64)
#		define HAM_PLATFORM HAM_PLATFORM_WIN64
#	else
#		define HAM_PLATFORM HAM_PLATFORM_WIN32
#	endif

#	define HAM_PLATFORM_EXEC_MIME HAM_MIME(HAM_MIME_TYPE_EXE, HAM_MIME_ENCODING_BINARY)
#	define HAM_PLATFORM_EXEC_EXT  ".exe"
#	define HAM_PLATFORM_DSO_MIME HAM_MIME(HAM_MIME_TYPE_DLL, HAM_MIME_ENCODING_BINARY)
#	define HAM_PLATFORM_DSO_EXT  ".dll"

#elif defined(__APPLE__) && defined(__MACH__)

#	define HAM_PLATFORM HAM_PLATFORM_APPLE
#	define HAM_PLATFORM_EXEC_MIME HAM_MIME(HAM_MIM_TYPE_MACH, HAM_MIME_ENCODING_BINARY)
#	define HAM_PLATFORM_EXEC_EXT
#	define HAM_PLATFORM_DSO_MIME HAM_MIME(HAM_MIM_TYPE_MACH, HAM_MIME_ENCODING_BINARY)
#	define HAM_PLATFORM_DSO_EXT ".dylib"

#elif defined(__unix__)

#	define HAM_PLATFORM HAM_PLATFORM_UNIX
#	define HAM_PLATFORM_EXEC_MIME HAM_MIME(HAM_MIME_TYPE_ELF, HAM_MIME_ENCODING_BINARY)
#	define HAM_PLATFORM_EXEC_EXT
#	define HAM_PLATFORM_DSO_MIME HAM_MIME(HAM_MIME_TYPE_SO, HAM_MIME_ENCODING_BINARY)
#	define HAM_PLATFORM_DSO_EXT  ".so"

#else

#	error "Unrecognized platform"

#endif

#define _GNU_SOURCE 1

#if HAM_PLATFORM == HAM_PLATFORM_WIN32
#	define ham_import __declspec(dllimport)
#	define ham_export __declspec(dllexport)
#	define ham_nothrow __declspec(nothrow)
#	define ham_popcnt16 __popcnt16
#	define ham_popcnt32 __popcnt
#	define ham_popcnt64 __popcnt64
#else
#	define ham_import
#	define ham_export
#endif

//
// Compiler stuff
//

#ifndef NDEBUG
#	define HAM_DEBUG
#else
#	define HAM_RELEASE
#endif

#if defined(__MINGW__) || defined(_MSVC_VER)
#	ifdef HAM_DEBUG
#		define ham_breakpoint() (__debugbreak())
#	else
#		define ham_breakpoint()
#	endif
#endif

#ifdef __GNUC__

#	include <signal.h>

#	if defined(HAM_DEBUG) && !defined(ham_breakpoint)
#		define ham_breakpoint() (raise(SIGTRAP))
#	endif

#	define ham_lam(result_, args, body) \
		({	result_ ham_impl_lam__(HAM_EAT args) body \
			ham_impl_lam__; })

#	define HAM_DIAGNOSTIC_PUSH() _Pragma("GCC diagnostic push")
#	define HAM_DIAGNOSTIC_POP() _Pragma("GCC diagnostic pop")

#	define HAM_DIAGNOSTIC_IGNORE_MACRO_REDEFINED() _Pragma("GCC diagnostic ignored \"-Wmacro-redefined\"")

#	define ham_public __attribute__((visibility("default")))
#	define ham_private __attribute__((visibility("hidden")))

#	define ham_nonnull_args(...) __attribute__((nonnull(__VA_ARGS__)))

#	define ham_likely(cond_)   __builtin_expect(!!(cond_), 1)
#	define ham_unlikely(cond_) __builtin_expect(!!(cond_), 0)

#	ifndef ham_nothrow
#		define ham_nothrow __attribute__((nothrow))
#	endif

#	ifndef ham_auto
#		define ham_auto __auto_type
#	endif

#	ifndef ham_thread_local
#		define ham_thread_local __thread
#	endif

#	ifndef ham_typeof
#		define ham_typeof(...) __typeof__(__VA_ARGS__)
#	endif

#	ifndef ham_popcnt16
#		define ham_popcnt16 __builtin_popcount
#	endif

#	ifndef ham_popcnt32
#		define ham_popcnt32 __builtin_popcount
#	endif

#	ifndef ham_popcnt64
#		define ham_popcnt64 __builtin_popcountl
#	endif

#	ifndef ham_lzcnt32
#		define ham_lzcnt32 __builtin_clz
#	endif

#	ifndef ham_lzcnt64
#		define ham_lzcnt64 __builtin_clzl
#	endif

#	define ham_min(a, b) \
		({	const ham_auto a_ = (a); const ham_auto b_ = (b); \
			a_ < b_ ? a_ : b_; })

#	define ham_max(a, b) \
		({	const ham_auto a_ = (a); const ham_auto b_ = (b); \
			a_ < b_ ? b_ : a_; })

#else // __cplusplus

#	define ham_public
#	define ham_private

#	define ham_likely(cond_) (cond_)
#	define ham_unlikely(cond_) (cond_)

#	define ham_min(a, b) \
		([](const auto a_; const auto b_) constexpr{ \
			return a_ < b_ ? a_ : b_; \
		}((a), (b)))

#	define ham_min(a, b) \
		([](const auto a_; const auto b_) constexpr{ \
			return a_ < b_ ? b_ : a_; \
		}((a), (b)))

#endif // __GNUC__

#ifdef _MSVC_VER
#	define HAM_DIAGNOSTIC_PUSH()
#	define HAM_DIAGNOSTIC_POP()
#	define HAM_DIAGNOSTIC_IGNORE_MACRO_REDEFINED()
#endif

#define ham_popcnt ham_popcnt32
#define ham_lzcnt  ham_lzcnt32

#ifndef ham_breakpoint
#	define ham_breakpoint()
#endif

#ifndef ham_nonnull_args
#	define ham_nonnull_args(...)
#endif

#ifdef HAM_LIB_IMPLEMENTATION
#	define ham_api ham_public ham_export
#else
#	define ham_api ham_public ham_import
#endif

/**
 * @}
 */

#endif // !HAM_CONFIG_H
