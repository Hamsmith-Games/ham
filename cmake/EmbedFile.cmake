#
# Embed INPUT into c header OUTPUT
#
function(embed_file INPUT OUTPUT)
	file(READ ${INPUT} INPUT_HEX HEX)

	string(LENGTH ${INPUT_HEX} INPUT_HEX_LEN)
	if(${INPUT_HEX_LEN} EQUAL 0)
		message(ERROR "Can not embed empty file: ${INPUT}")
		return()
	endif()

	get_filename_component(INPUT_FILENAME ${INPUT} NAME)
	get_filename_component(OUTPUT_FILENAME ${OUTPUT} NAME)

	string(MAKE_C_IDENTIFIER ${INPUT_FILENAME} OUTPUT_VAR_NAME)

	string(MAKE_C_IDENTIFIER ${OUTPUT_FILENAME} OUTPUT_H_GUARD)
	string(TOUPPER ${OUTPUT_H_GUARD} OUTPUT_H_GUARD)
	string(PREPEND OUTPUT_H_GUARD "EMBED_FILE_")

	set(OUTPUT_DATA_INNER "")
	set(OUTPUT_DATA_SIZE 0)

	math(EXPR INPUT_IT_MAX "${INPUT_HEX_LEN}-2")
	foreach(INPUT_IT RANGE 0 ${INPUT_IT_MAX} 2)
		string(SUBSTRING ${INPUT_HEX} ${INPUT_IT} 2 OUTPUT_HEX_PAIR)

		string(APPEND OUTPUT_DATA_INNER "0x${OUTPUT_HEX_PAIR},")
		math(EXPR OUTPUT_DATA_SIZE "${OUTPUT_DATA_SIZE}+1" OUTPUT_FORMAT DECIMAL)
	endforeach()

	set(
		OUTPUT_SOURCE_LINES
"// ${OUTPUT_FILENAME} generated by ham::embed_file\n\
#ifndef ${OUTPUT_H_GUARD}\n\
#define ${OUTPUT_H_GUARD} 1\n\
static const char ${OUTPUT_VAR_NAME}_data[] = {${OUTPUT_DATA_INNER}0x0}\;\n\
static const unsigned long ${OUTPUT_VAR_NAME}_size = ${OUTPUT_DATA_SIZE}\;\n\
#endif // !${OUTPUT_H_GUARD}\n\
"
    )

    file(WRITE ${OUTPUT} ${OUTPUT_SOURCE_LINES})

	message(STATUS "Embedded ${INPUT_FILENAME} as ${OUTPUT}")
endfunction()
