#!/usr/bin/env python3

import requests
import xml.etree.ElementTree as etree

vk_xml_url = "https://raw.githubusercontent.com/KhronosGroup/Vulkan-Docs/v1.3.229/xml/vk.xml"

vk_xml_res = requests.get(vk_xml_url)
if not vk_xml_res:
	print(file=sys.stderr, f"Failed to retieve text from url: {vk_xml_url}")
	exit(1)

vk_xml_root = etree.fromstring(vk_xml_res.text)

vk_features = vk_xml_root.findall('./feature')
vk_exts     = vk_xml_root.findall('./extensions/extension[@author="KHR"]')

fns_inner  = ''
fns_inline = ''

loader_inner = ''

fn_ptrs       = ''
fn_set_inner  = ''

def push_cmd(indent, cmd):
	cmd_name = cmd.attrib['name']

	global fns_inner

	fns_inner += '{1}PFN_{0} {0};\n'.format(cmd_name, indent)

for feature in vk_features:
	feature_version = feature.attrib['number']

	fns_inner    += '\n\t// Vulkan {}\n'.format(feature_version)

	cmds = feature.findall('require/command')

	for cmd in cmds:
		cmd_name = cmd.attrib['name']

		push_cmd('\t', cmd)

for ext in vk_exts:
	ext_name = ext.attrib['name']
	cmds = ext.findall('require/command')

	if len(cmds) == 0: continue

	fns_inner    += '\n\t// {}\n'.format(ext_name)

	before_guard = ''
	after_guard  = ''
	indent       = '\t'

	match ext_name:
		case 'VK_KHR_xlib_surface' | 'VK_EXT_acquire_xlib_display':
			before_guard = '#ifdef HAM_VK_XLIB\n'
			after_guard  = '#endif // HAM_VK_XLIB\n'

		case 'VK_KHR_xcb_surface':
			before_guard = '#ifdef HAM_VK_XCB\n'
			after_guard  = '#endif // HAM_VK_XCB\n'

		case 'VK_KHR_wayland_surface':
			before_guard = '#ifdef HAM_VK_WAYLAND\n'
			after_guard  = '#endif // HAM_VK_WAYLAND\n'

		case 'VK_KHR_android_surface':
			before_guard = '#ifdef HAM_VK_ANDROID\n'
			after_guard  = '#endif // HAM_VK_ANDROID\n'

		case 'VK_KHR_win32_surface' | 'VK_KHR_external_memory_win32' | 'VK_KHR_external_semaphore_win32' | 'VK_KHR_external_fence_win32':
			before_guard = '#ifdef HAM_VK_WIN32\n'
			after_guard  = '#endif // HAM_VK_WIN32\n'

		case 'VK_KHR_video_queue' | 'VK_KHR_video_decode_queue' | 'VK_KHR_video_encode_queue':
			before_guard = '#ifdef HAM_VK_VIDEO\n'
			after_guard  = '#endif // HAM_VK_VIDEO\n'

	if len(before_guard) > 0:
		fns_inner    += '\t'
		fns_inner    += before_guard
		indent       += '\t'

	for cmd in cmds:
		cmd_name = cmd.attrib['name']

		match cmd_name:
			case 'vkGetDeviceGroupPresentCapabilitiesKHR' | 'vkGetDeviceGroupSurfacePresentModesKHR' | 'vkGetPhysicalDevicePresentRectanglesKHR' | 'vkAcquireNextImage2KHR':
				if ext_name != 'VK_KHR_device_group': continue

			case 'vkCmdPushDescriptorSetWithTemplateKHR':
				if ext_name != 'VK_KHR_descriptor_update_template': continue

		push_cmd(indent, cmd)

	if len(after_guard) > 0:
		fns_inner    += '\t'
		fns_inner    += after_guard

header_source = '''// Generated by ham/utils/gen-vk.py

#ifndef HAM_VK_FNS_H
#define HAM_VK_FNS_H 1

#include "ham/config.h"

#define VK_NO_PROTOTYPES 1
#include <vulkan/vulkan_core.h>

#ifdef HAM_VK_WAYLAND
#	include <vulkan/vulkan_wayland.h>
#endif

#ifdef HAM_VK_XCB
#	include <xcb/xcb.h>
#	include <vulkan/vulkan_xcb.h>
#endif

#ifdef HAM_VK_XLIB
#	include <X11/Xlib.h>
#	include <vulkan/vulkan_xlib.h>
#endif

#ifdef HAM_VK_WIN32
#	include <vulkan/vulkan_win32.h>
#endif

HAM_C_API_BEGIN

typedef struct ham_vk_fns{{{0}}} ham_vk_fns;

HAM_C_API_END

#endif // !HAM_VK_FNS_H
'''.format(fns_inner)

with open('vk_fns.h', 'w', encoding='utf-8') as f:
	f.write(header_source)
